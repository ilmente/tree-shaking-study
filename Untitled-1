Skip to content
This repository
Search
Pull requests
Issues
Marketplace
Gist
 @abelspry
 Sign out
 Watch 2
  Star 1
 Fork 1 ilmente/tree-shaking-study
 Code  Issues 0  Pull requests 0  Projects 0  Wiki Insights 
Branch: dev-riccardobe… Find file Copy pathtree-shaking-study/src/experiments/riccardobevilacqua/analyzer.ts
dacad53  18 minutes ago
@riccardobevilacqua riccardobevilacqua Simplified ast observable
1 contributor
RawBlameHistory     
64 lines (57 sloc)  2 KB
/**
 * ****************************************************** *
 *                                                        *
 *                        ANALYZER                        *
 *                                                        *
 * ****************************************************** *
 * This library aims to:
 * 1) Access source code
 * 2) Detect dependencies tree and its properties
 * 
 * Necessary and sufficient info to include a function in the output:
 * 1) origin
 * 2) origin imports
 * 3) origin invoked functions
 * 4) origin exported functions
 * 5) origin private declared functions
 * 
 */

import { readFileSync } from 'fs';
import { resolve } from 'path';
import * as babylon from 'babylon';
import * as babelTypes from 'babel-types';
import { Observable, BehaviorSubject } from 'rxjs/Rx';

class Analyzer {
    dirPath: string;
    encoding: string;    
    files: BehaviorSubject<string> = new BehaviorSubject('index');

    constructor(dirPath: string, encoding: string = 'utf8') {
        this.dirPath = dirPath;
        this.encoding = encoding;

        this.files.subscribe(filename => {
            const ast = this.getAstFromFile(resolve(this.dirPath, filename) + '.js');

            ast.subscribe({
                next: (value) => {
                    console.log('==== AST...');
                    console.log(value);
                },
                error: (error) => {
                    console.error(error);
                },
                complete: () => console.log('==== ...Completed')
            });
        });
    }

    getAstFromFile(filename: string): Observable<babelTypes.File> {
        return Observable
            .of(readFileSync(filename, this.encoding))
            .map(code =>                 
                babylon.parse(code, {
                    allowImportExportEverywhere: true,
                    sourceFilename: filename,
                    sourceType: 'module'
                })
            );    
    }
}

const analyzer = new Analyzer('./examples/fn/01/');
Contact GitHub API Training Shop Blog About
© 2017 GitHub, Inc. Terms Privacy Security Status Help
